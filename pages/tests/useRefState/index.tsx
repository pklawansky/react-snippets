import Head from 'next/head';
import { useEffect, useState } from 'react';
import useRefState from '../../../hooks/useRefState';
import styles from '../../../styles/Tests.module.css';

/**
 * Test is designed to illustrate usage of the useRefState hook.
 * 
 * This hook guarantees an expected value, stored in the MutableRefObject returned as the third output of the hook's return value, as seen in the console output.
 */
export default function Tests() {

    const [state1, setState1, ref1] = useRefState<number>(0);
    const [state2, setState2, ref2] = useRefState<number>(0);
    const [state3, setState3, ref3] = useRefState<number>(0);
    const [state4, setState4] = useState<number>(0);

    useEffect(() => {
        let interval = setInterval(() => {
            setState1(state1 + 1);
            setState2(ref2.current + 1);
            setState3((_state3: number) => {
                console.log("state3", state3, "ref3.current", ref3.current);
                return _state3 + 1;
            });
            setState4((_state4: number) => {
                console.log("state4", state4);
                return _state4 + 1;
            });
        }, 1000);

        return () => {
            clearInterval(interval);
        }
    }, []);


    return (
        <div className={styles.container}>
            <Head>
                <title>Next App Testing page: useRefState</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>

                <h1 className={styles.title}>
                    Testing - State increments by 1 per second starting at 0
                </h1>

                <div className={styles.description}>
                    <code className={styles.code}>
                        setState1(state1 + 1);
                        <br />
                        state1: {state1}
                        <br />
                        ref1.current: {ref1.current}
                    </code>
                    <p className={styles.note}>This is standard bad behaviour from useState hook</p>
                </div>

                <div className={styles.description}>
                    <code className={styles.code}>
                        setState2(ref2.current + 1);
                        <br />
                        state2: {state2}
                        <br />
                        ref2.current: {ref2.current}
                    </code>
                    <p className={styles.note}>Using the ref.current value to update state, is safe to use and gives expected output, can potentially be updated very quickly</p>
                </div>

                <div className={styles.description}>
                    <code className={styles.code}>
                        setState3((_state3: number) ={'>'} _state3 + 1);
                        <br />
                        state3: {state3}
                        <br />
                        ref3.current: {ref3.current}
                    </code>
                    <p className={styles.note}>Replicating syntax for built in state update from useState hooks</p>
                </div>

                <div className={styles.description}>
                    <code className={styles.code}>
                        setState4((_state4: number) ={'>'} _state4 + 1);
                        <br />
                        state4: {state4}
                    </code>
                    <p className={styles.note}>Built in state update from useState hooks which is safer to use than test 1</p>
                </div>
            </main>

            <footer className={styles.footer}>

            </footer>
        </div>
    )
}
